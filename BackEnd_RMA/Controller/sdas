// GET: Mengambil data dari employees dengan join tmaudusr
// module.exports = (req, res) => {
//     pool.query(
//         `
//         SELECT nik, nama, email
//         FROM employees 
//         INNER JOIN tmaudusr  ON n_audusr_usrnm = nik AND n_audusr_nm = nama AND n_audusr_email = email
//         `,
//         [],
//         (dbError, dbResponse) => {
//             if (dbError) {
//                 console.error('Database error:', dbError);
//                 res.status(500).send('Internal Server Error');
//                 return;
//             }

//             res.json(dbResponse.rows.map(row => ({
//                 nik: row.nik,
//                 nama: row.nama,
//                 email: row.email
//             })));
//         }
//     );
// }

// POST: Menambahkan data ke tmaudusr
// module.exports = (req, res) => {
//     pool.query(
//         `
//         INSERT INTO tmaudusr (i_audusr, n_audusr_nm, n_audusr_usrnm, n_audusr_pswd, n_audusr_email, c_audusr_role, c_audusr_audr, i_entry, d_entry)
//         VALUES ($1, $2, $3, %4, $5, $6, $7, %8, %9)
//         `,  
//         [i_audusr, n_audusr_nm, n_audusr_usrnm, n_audusr_pswd, n_audusr_email, c_audusr_role, c_audusr_audr, i_entry, d_entry],
//         (dbError, dbResponse) => {
//             if (dbError) {
//                 console.error('Database error:', dbError);
//                 res.status(500).send('Internal Server Error');
//                 return;
//             }

//             res.status(201).send('Data added successfully');
//         }
//     );
// }

// module.exports = (req, res) => {
//   const key = req.query.key;

//   if (!key) {
//     res.status.send('Missing key parameter');
//     return;
//   }

//   const query = `
//     SELECT A.n_audusr_usrnm, A.n_audusr_nm, A.c_audusr_role, 
//            A.c_audusr_audr, B.c_org_cur, A.n_audusr_email
//     FROM tmaudusr A
//     JOIN employess B ON A.n_audusr_usrnm = B.i_emp
//     WHERE A.i_audusr = ?
//   `;

//   connection.query(query, [key], (error, results) => {
//     if (error) {
//       console.error('Error executing the query:', error);
//       res.send('Error executing the query');
//       return;
//     }
//     res.json(results);
//   });
//   };

import React, { useState, useEffect } from "react";
import Modal from "react-modal";
import axios from 'axios';
import DatePicker from 'react-datepicker';
import { getYear } from 'date-fns';
import 'react-datepicker/dist/react-datepicker.css';

Modal.setAppElement("#root");

const EvidenceAait = () => {
  const [orders, setOrders] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedYear, setSelectedYear] = useState(null);
  const [newUser, setNewUser] = useState({
    no: "",
    dataAndDocumentNeeded: "",
    phase: "",
    status: "",
    deadline: "",
    remarksByAuditee: "",
    remarksByAuditor: "",
    auditee: "",
    auditor: "",
    statusComplete: "",
    publishingYear: "",
  });
  const [currentEditOrder, setCurrentEditOrder] = useState(null);

  const convertStatus = (status) => {
    switch (status) {
      case 1:
        return "pending";
      case 2:
        return "not available";
      case 3:
        return "not applicable";
      default:
        return "unknown";
    }
  };

  const convertAuditor = (auditor) => {
    switch (auditor) {
      case 1:
        return "DGCA";
      case 2:
        return "Finance";
      case 3:
        return "ITML";
      case 4:
        return "ParkerRussel";
      default:
        return "unknown";
    }
  };

  const convertStatusComplete = (statusComplete) => {
    switch (statusComplete) {
      case 0:
        return { text: "NOT COMPLETE", backgroundColor: "red", color: "white" };
      case 1:
        return { text: "COMPLETE AUDITEE", backgroundColor: "orange", color: "white" };
      case 2:
        return { text: "COMPLETE AUDITEE ADMIN IT", backgroundColor: "yellow", color: "black" };
      case 3:
        return { text: "COMPLETE SPI", backgroundColor: "green", color: "white" };
      case 4:
        return { text: "COMPLETE AUDITOR", backgroundColor: "blue", color: "white" };
      default:
        return { text: "UNKNOWN STATUS", backgroundColor: "grey", color: "white" };
    }
  };
  
  useEffect(() => {
    localStorage.setItem("orders", JSON.stringify(orders));
  }, [orders]);

  const handleAddUser = () => {
    setOrders((prev) => [
      ...prev,
      { no: prev.length > 0 ? prev[prev.length - 1].no + 1 : 1, ...newUser, publishingYear: new Date().getFullYear() },
    ]);
    setIsModalOpen(false);
    resetNewUser();
  };

  const handleEditUser = (order) => {
    setCurrentEditOrder(order);
    setIsEditModalOpen(true);
  };

  const handleSaveEditUser = () => {
    setOrders((prev) =>
      prev.map((order) =>
        order.no === currentEditOrder.no ? currentEditOrder : order
      )
    );
    setIsEditModalOpen(false);
    setCurrentEditOrder(null);
  };

  const handleDeleteUser = (orderToDelete) => {
    setOrders((prev) => prev.filter((order) => order.no !== orderToDelete.no));
  };

  const resetNewUser = () => {
    setNewUser({
      no: "",
      dataAndDocumentNeeded: "",
      phase: "",
      status: "",
      deadline: "",
      remarksByAuditee: "",
      remarksByAuditor: "",
      auditee: "",
      auditor: "",
      statusComplete: "",
      publishingYear: "",
    });
  };

  const handleYearChange = (date) => {
    const year = date ? getYear(date) : null;
    setSelectedYear(year);
  };

  const filteredOrders = selectedYear
    ? orders.filter((order) => order.publishingYear === parseInt(selectedYear))
    : orders;

  useEffect(() => {
    const fetchDataByYear = async () => {
      if (selectedYear) {
        try {
          const response = await axios.get(${import.meta.env.VITE_HELP_DESK}/AuditIT/tmau-devd, {
            params: { year: selectedYear }
          });

          if (response.data && response.data.payload && Array.isArray(response.data.payload.data)) {
            const formattedData = response.data.payload.data.map(item => ({
              no: item.i_audevd,
              dataAndDocumentNeeded: item.n_audevd_title,
              phase: item.n_audevd_phs,
              status: convertStatus(item.c_audevd_stat),
              deadline: new Date(item.d_audevd_ddl).toLocaleDateString(),
              remarksByAuditee: item.i_entry,
              remarksByAuditor: item.n_audevd_audr,
              auditee: item.i_audevd_aud,
              auditor: convertAuditor(item.c_audevd_audr),
              statusComplete: convertStatusComplete(item.c_audevd_statcmpl),
              publishingYear: new Date(item.c_audevd_yr).getFullYear(),
            }));
            setOrders(formattedData);
          } else {
            setOrders([]);
            console.log('Data tidak ditemukan atau tidak dalam format array');
          }            
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      } else {
        console.log('Tahun tidak dipilih, fetchDataByYear tidak dijalankan');
      }
    };

    fetchDataByYear();
  }, [selectedYear]);

  return (
    <div className="evidence-content">
      <h2>Data Evidence</h2>
      <div className="filter-year-evidence">
        <label>Filter Berdasarkan Tahun Penerbitan: </label>
        <DatePicker
          selected={selectedYear ? new Date(${selectedYear}-01-01) : null}
          onChange={handleYearChange}
          showYearPicker
          dateFormat="yyyy"
          placeholderText="Select year"
        />
      </div>

      <div className="add-evidence">
        <button
          className="add-evidence-button"
          onClick={() => {
            setIsModalOpen(true);
            resetNewUser();
          }}
        >
          Add User
        </button>
      </div>

      <div className="evidence-table">
        <table>
          <thead>
            <tr>
              <th>No</th>
              <th>Data and Document Needed</th>
              <th>Phase</th>
              <th>Status</th>
              <th>Deadline</th>
              <th>Remarks by Auditee</th>
              <th>Remarks by Auditor</th>
              <th>Auditee</th>
              <th>Auditor</th>
              <th>Status Complete</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {filteredOrders.length > 0 ? (
              filteredOrders.map((order, index) => (
                <tr key={order.no || index}>
                  <td>{order.no}</td>
                  <td>{order.dataAndDocumentNeeded}</td>
                  <td>{order.phase}</td>
                  <td>{order.status}</td>
                  <td>{order.deadline}</td>
                  <td>{order.remarksByAuditee}</td>
                  <td>{order.remarksByAuditor}</td>
                  <td>{order.auditee}</td>
                  <td>{order.auditor}</td>
                  <td style={{ backgroundColor: order.statusComplete.backgroundColor, color: order.statusComplete.color }}>
                    {order.statusComplete.text}
                  </td>
                 
                  <td>
                    <button onClick={() => handleEditUser(order)}>Edit</button>
                    <button onClick={() => handleDeleteUser(order)}>Delete</button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="12">Tidak ada data untuk ditampilkan</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Add User Modal */}
      <Modal
        isOpen={isModalOpen}
        onRequestClose={() => setIsModalOpen(false)}
        contentLabel="Add User Modal"
        className="evidence-modal"
        overlayClassName="evidence-modal-overlay"
      >
        <h2>Add User</h2>
        <form>
          <label>No:</label>
          <input
            type="text"
            value={newUser.no}
            onChange={(e) => setNewUser({ ...newUser, no: e.target.value })}
          />
          <label>Data and Document Needed:</label>
          <input
            type="text"
            value={newUser.dataAndDocumentNeeded}
            onChange={(e) => setNewUser({ ...newUser, dataAndDocumentNeeded: e.target.value })}
          />
          <label>Phase:</label>
          <input
            type="text"
            value={newUser.phase}
            onChange={(e) => setNewUser({ ...newUser, phase: e.target.value })}
          />
          <label>Status:</label>
          <input
            type="text"
            value={newUser.status}
            onChange={(e) => setNewUser({ ...newUser, status: e.target.value })}
          />
          <label>Deadline:</label>
          <input
            type="date"
            value={newUser.deadline}
            onChange={(e) => setNewUser({ ...newUser, deadline: e.target.value })}
          />
          <label>Remarks by Auditee:</label>
          <input
            type="text"
            value={newUser.remarksByAuditee}
            onChange={(e) => setNewUser({ ...newUser, remarksByAuditee: e.target.value })}
          />
          <label>Remarks by Auditor:</label>
          <input
            type="text"
            value={newUser.remarksByAuditor}
            onChange={(e) => setNewUser({ ...newUser, remarksByAuditor: e.target.value })}
          />
          <label>Auditee:</label>
          <input
            type="text"
            value={newUser.auditee}
            onChange={(e) => setNewUser({ ...newUser, auditee: e.target.value })}
          />
          <label>Auditor:</label>
          <input
            type="text"
            value={newUser.auditor}
            onChange={(e) => setNewUser({ ...newUser, auditor: e.target.value })}
          />
          <label>Status Complete:</label>
          <input
            type="text"
            value={newUser.statusComplete}
            onChange={(e) => setNewUser({ ...newUser, statusComplete: e.target.value })}
          />
          <button type="button" onClick={handleAddUser}>Save</button>
          <button type="button" onClick={() => setIsModalOpen(false)}>Cancel</button>
        </form>
      </Modal>

      {/* Edit User Modal */}
      <Modal
        isOpen={isEditModalOpen}
        onRequestClose={() => setIsEditModalOpen(false)}
        contentLabel="Edit User Modal"
        className="evidence-modal"
        overlayClassName="evidence-modal-overlay"
      >
      </Modal>
    </div>
  );
};

export default EvidenceAait;